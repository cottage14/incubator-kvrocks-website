"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[763],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(k,i(i({ref:t},p),{},{components:r})):n.createElement(k,i({ref:t},p))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9284:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={slug:"go-redis-kvrocks-opentelemetry",title:"Getting started with Kvrocks and go-redis",authors:["vmihailenco"]},i=void 0,s={permalink:"/blog/go-redis-kvrocks-opentelemetry",editUrl:"https://github.com/apache/incubator-kvrocks-website/tree/main/blog/2022-11-20-go-redis-kvrocks-opentelemetry/index.md",source:"@site/blog/2022-11-20-go-redis-kvrocks-opentelemetry/index.md",title:"Getting started with Kvrocks and go-redis",description:"This post explains how to get started with Apache Kvrocks using go-redis client. It also demonstrates how you can use OpenTelemetry and Uptrace to monitor Kvrocks on both client and server sides.",date:"2022-11-20T00:00:00.000Z",formattedDate:"November 20, 2022",tags:[],readingTime:3.98,hasTruncateMarker:!0,authors:[{name:"Vladimir Mihailenco",title:"Grumpy Gopher",url:"https://github.com/vmihailenco",imageURL:"https://github.com/vmihailenco.png",key:"vmihailenco"}],frontMatter:{slug:"go-redis-kvrocks-opentelemetry",title:"Getting started with Kvrocks and go-redis",authors:["vmihailenco"]},nextItem:{title:"How we use RocksDB in Kvrocks?",permalink:"/blog/how-we-use-rocksdb-in-kvrocks"}},l={authorsImageUrls:[void 0]},c=[{value:"What is Kvrocks?",id:"what-is-kvrocks",level:2},{value:"Getting started with Kvrocks",id:"getting-started-with-kvrocks",level:2},{value:"Connecting to Kvrocks from Go",id:"connecting-to-kvrocks-from-go",level:2},{value:"What is OpenTelemetry?",id:"what-is-opentelemetry",level:2},{value:"What is Uptrace?",id:"what-is-uptrace",level:2},{value:"Monitoring Kvrocks client",id:"monitoring-kvrocks-client",level:2},{value:"Monitoring Kvrocks server",id:"monitoring-kvrocks-server",level:2},{value:"Custom metrics",id:"custom-metrics",level:2},{value:"Useful links",id:"useful-links",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...o}=e;return(0,a.kt)(u,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This post explains how to get started with Apache Kvrocks using go-redis client. It also demonstrates how you can use OpenTelemetry and Uptrace to monitor Kvrocks on both client and server sides."),(0,a.kt)("h2",{id:"what-is-kvrocks"},"What is Kvrocks?"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://kvrocks.apache.org/"},"Apache Kvrocks")," is a distributed key-value NoSQL database that uses RocksDB as a storage engine and is compatible with Redis protocol."),(0,a.kt)("p",null,"You can use Kvrocks as a drop-in replacement for Redis to store data on SSD decreasing the cost of memory and increasing the capacity. For example, imagine taking one of the many existing Redis-based job queues and using them with Kvrocks and SSD storage."),(0,a.kt)("p",null,"Kvrocks supports most ",(0,a.kt)("a",{parentName:"p",href:"/docs/supported-commands"},"Redis commands")," with a single notable exception being that ",(0,a.kt)("inlineCode",{parentName:"p"},"watch")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"unwatch")," commands are not ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/apache/incubator-kvrocks/issues/315"},"supported yet"),". (Note: At the time of writing this article, ",(0,a.kt)("inlineCode",{parentName:"p"},"watch"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"unwatch")," was not supported. However, it is ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/apache/incubator-kvrocks/pull/1279"},"now supported")," and expected to be released in version 2.4.0 and later.)"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"/docs/cluster"},"Kvrocks Cluster")," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/replication"},"replication")," are available as well."),(0,a.kt)("h2",{id:"getting-started-with-kvrocks"},"Getting started with Kvrocks"),(0,a.kt)("p",null,"You can launch Kvrocks using Docker:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"docker run -it -p 6666:6666 apache/kvrocks\n")),(0,a.kt)("p",null,"And start using it right away:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},'redis-cli -p 6666\n\n127.0.0.1:6666> get foo\n(nil)\n127.0.0.1:6666> set foo bar\nOK\n127.0.0.1:6666> get foo\n"bar"\n')),(0,a.kt)("p",null,"You can also ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/apache/incubator-kvrocks#build-and-run-kvrocks"},"build")," Kvrocks with GCC yourself."),(0,a.kt)("h2",{id:"connecting-to-kvrocks-from-go"},"Connecting to Kvrocks from Go"),(0,a.kt)("p",null,"Since Kvrocks uses Redis-compatible protocol, you can use your favorite Redis client to work with Kvrocks, for example, ",(0,a.kt)("a",{parentName:"p",href:"https://redis.uptrace.dev/"},"Go Redis client"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "github.com/go-redis/redis/v8"\n)\n\nfunc main() {\n    ctx := context.Background()\n\n    rdb := redis.NewClient(&redis.Options{\n        Addr: "localhost:6666",\n    })\n\n    err := rdb.Set(ctx, "key", "value", 0).Err()\n    if err != nil {\n        panic(err)\n    }\n\n    val, err := rdb.Get(ctx, "key").Result()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println("key", val)\n}\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://redis.uptrace.dev/guide/go-redis-pipelines.html"},"Pipelines"),",",(0,a.kt)("a",{parentName:"p",href:"https://redis.uptrace.dev/guide/go-redis-pubsub.html"},"pub/sub"),", and even ",(0,a.kt)("a",{parentName:"p",href:"https://redis.uptrace.dev/guide/lua-scripting.html"},"Lua scripts")," are working as well:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var incrBy = redis.NewScript(`\nlocal key = KEYS[1]\nlocal change = ARGV[1]\n\nlocal value = redis.call("GET", key)\nif not value then\n  value = 0\nend\n\nvalue = value + change\nredis.call("SET", key, value)\n\nreturn value\n`)\n')),(0,a.kt)("p",null,"You can then run the script like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'keys := []string{"my_counter"}\nvalues := []interface{}{+1}\nnum, err := incrBy.Run(ctx, rdb, keys, values...).Int()\n')),(0,a.kt)("h2",{id:"what-is-opentelemetry"},"What is OpenTelemetry?"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," is a vendor-neutral standard that allows you to collect and export traces, logs, and metrics."),(0,a.kt)("p",null,"Uptrace, one of its vendor, provides a series of good documents about the terminology and usages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://uptrace.dev/opentelemetry"},"What is OpenTelemetry?")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://uptrace.dev/opentelemetry/distributed-tracing.html"},"OpenTelemetry Distributed Tracing")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://uptrace.dev/opentelemetry/metrics.html"},"OpenTelemetry Metrics"))),(0,a.kt)("p",null,"Otel allows developers to collect and export telemetry data in a vendor-agnostic way. With OpenTelemetry, you can instrument your application once and then add or change vendors without changing the instrumentation, for example, here is a list ",(0,a.kt)("a",{parentName:"p",href:"https://uptrace.dev/get/compare/datadog-competitors.html"},"DataDog competitors")," that support OpenTelemetry."),(0,a.kt)("h2",{id:"what-is-uptrace"},"What is Uptrace?"),(0,a.kt)("p",null,"Uptrace is a ",(0,a.kt)("a",{parentName:"p",href:"https://uptrace.dev/get/open-source-apm.html"},"source-available APM tool")," that supports distributed tracing, metrics, and logs. You can use it to monitor applications and set up automatic alerts to receive notifications via email, Slack, Telegram, and more."),(0,a.kt)("p",null,"Uptrace uses OpenTelemetry to collect data and ClickHouse database to store it. ClickHouse is the only dependency."),(0,a.kt)("h2",{id:"monitoring-kvrocks-client"},"Monitoring Kvrocks client"),(0,a.kt)("p",null,"You can use OpenTelemetry and Uptrace together to monitor Kvrocks performance using the go-redis instrumentation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'import "github.com/go-redis/redis/extra/redisotel/v9"\n\nrdb := redis.NewClient(&redis.Options{\n    Addr: ":6666",\n})\n\nif err := redisotel.InstrumentTracing(rdb, redisotel.WithDBSystem("kvrocks")); err != nil {\n    panic(err)\n}\nif err := redisotel.InstrumentMetrics(rdb, redisotel.WithDBSystem("kvrocks")); err != nil {\n    panic(err)\n}\n')),(0,a.kt)("p",null,"Once the data reaches Uptrace, it will generate the following dashboard for you:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Uptrace DB dashboard",src:r(9753).Z,width:"996",height:"479"})),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://uptrace.dev/get/get-started.html"},"Getting started with Uptrace")," for details."),(0,a.kt)("h2",{id:"monitoring-kvrocks-server"},"Monitoring Kvrocks server"),(0,a.kt)("p",null,"You can also configure OpenTelemetry Redis",(0,a.kt)("a",{parentName:"p",href:"https://uptrace.dev/opentelemetry/collector-config.html?receiver=redis"},"receiver")," to monitor Kvrocks:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"receivers:\n  redis/kvrocks:\n    endpoint: 'kvrocks:6666'\n    collection_interval: 10s\n")),(0,a.kt)("p",null,"The receiver works by parsing the output of ",(0,a.kt)("inlineCode",{parentName:"p"},"INFO")," command and produces a number of useful metrics:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Redis Metrics",src:r(5353).Z,width:"981",height:"752"})),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/uptrace/uptrace/tree/master/example/kvrocks"},"GitHub example")," and ",(0,a.kt)("a",{parentName:"p",href:"https://uptrace.dev/opentelemetry/redis-monitoring.html"},"OpenTelemetry Redis monitoring")," for details."),(0,a.kt)("h2",{id:"custom-metrics"},"Custom metrics"),(0,a.kt)("p",null,"Using OpenTelemetry Metrics API, you can even create custom Kvrocks metrics. For example, the following function parses ",(0,a.kt)("inlineCode",{parentName:"p"},"used_disk_percent")," to create ",(0,a.kt)("inlineCode",{parentName:"p"},"kvrocks.used_disk_percent")," metric:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'var re = regexp.MustCompile(`used_disk_percent:\\s(\\d+)%`)\n\nfunc monitorKvrocks(ctx context.Context, rdb *redis.Client) error {\n    mp := global.MeterProvider()\n    meter := mp.Meter("github.com/uptrace/uptrace/example/kvrocks")\n\n    usedDiskPct, err := meter.AsyncFloat64().Gauge(\n        "kvrocks.used_disk_percent",\n        instrument.WithUnit("%"),\n    )\n    if err != nil {\n        return err\n    }\n\n    return meter.RegisterCallback(\n        []instrument.Asynchronous{\n            usedDiskPct,\n        },\n        func(ctx context.Context) {\n            pct, err := getUsedDiskPercent(ctx, rdb)\n            if err != nil {\n                otel.Handle(err)\n            }\n            usedDiskPct.Observe(ctx, pct, semconv.DBSystemKey.String("kvrocks"))\n        },\n    )\n}\n\nfunc getUsedDiskPercent(ctx context.Context, rdb *redis.Client) (float64, error) {\n    info, err := rdb.Info(ctx, "keyspace").Result()\n    if err != nil {\n        return 0, err\n    }\n\n    m := re.FindStringSubmatch(info)\n    if m == nil {\n        return 0, errors.New("can\'t find used_disk_percent metric")\n    }\n\n    n, err := strconv.ParseInt(m[1], 10, 64)\n    if err != nil {\n        return 0, err\n    }\n\n    return float64(n) / 100, nil\n}\n')),(0,a.kt)("p",null,"The metric looks like this in Uptrace:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Redis Metrics",src:r(5894).Z,width:"963",height:"707"})),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://uptrace.dev/opentelemetry/go-metrics.html"},"OpenTelemetry Go Metrics API")," for details."),(0,a.kt)("h2",{id:"useful-links"},"Useful links"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/getting-started"},"Getting started with Kvrocks")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://redis.uptrace.dev/guide/go-redis.html"},"Go Redis")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://uptrace.dev/get/get-started.html"},"Get started with Uptrace"))))}d.isMDXComponent=!0},9753:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/db-dashboard-88f6c06ead1f69680176c55f13a980cc.png"},5353:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/redis-metrics-415edd2a4992ccb450d10694aff469b7.png"},5894:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/used-disk-percent-73d26545dfb630b49195f761a055b23b.png"}}]);